
# -*- coding: utf-8 -*-
"""Final_Project.ipynb

Automatically generated by Colab.

Original file is located at
colab.research.google.com/drive/1_DMevgk4hU9yjA5fx_QyuAu4EYVnAKVr?usp=sharing
"""

import os
import torch
from torchvision import transforms, datasets
from torchvision import models
import torch.optim as optim
from torch.optim import lr_scheduler
from google.colab import files
from torch import nn

# Set device to GPU if available, else CPU
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

print("Is CUDA available:", torch.cuda.is_available())
print("CUDA version:", torch.version.cuda)
print("Number of GPUs:", torch.cuda.device_count())
print("GPU Name:", torch.cuda.get_device_name(0) if torch.cuda.is_available() else "CUDA not available")

import zipfile
from torch import nn
from torchvision.models.resnet import ResNet50_Weights
from google.colab import drive
from torch.utils.data import Dataset, DataLoader
from torch.utils.data.dataset import random_split
import numpy as np

# Mount Google Drive
drive.mount('/content/drive')

# Access files in Google Drive
path_to_file = '/content/drive/My Drive/train/train'


# Function to pad numbers with leading zeros
def zero_pad(number):
    return str(number).zfill(2)

# Rename images inside each folder
for folder_number in range(100):
    folder_path = os.path.join(path_to_file, zero_pad(folder_number))

    # Print folder name
    #print(f'Folder: {folder_path}')

    # Rename images inside the folder
    for file_number, file_name in enumerate(sorted(os.listdir(folder_path))):
        old_file_path = os.path.join(folder_path, file_name)
        new_file_name = f'{zero_pad(file_number)}.jpg'
        new_file_path = os.path.join(folder_path, new_file_name)
        os.rename(old_file_path, new_file_path)
        #print(f'- Renamed: {file_name} -> {new_file_name}')

# Print folders and files inside each folder
for folder_number in range(100):
    folder_path = os.path.join(path_to_file, zero_pad(folder_number))

    # Print folder name
    print(f'Folder: {folder_path}')

    # Print files inside the folder
    for file_name in sorted(os.listdir(folder_path)):
       print(f'- {file_name}')
       pass

# Define transformations for your images
training_transform = transforms.Compose([
    transforms.Resize((224, 224)),  # Resize images to 224x224
    transforms.RandomHorizontalFlip(),  # Randomly flip images horizontally
    transforms.RandomRotation(10),  # Randomly rotate images in the range (-10, 10) degrees
    transforms.ColorJitter(brightness=0.2, contrast=0.2, saturation=0.2, hue=0.1),  # Randomly alter the brightness, contrast, saturation, and hue
    transforms.ToTensor(),  # Convert images to PyTorch tensors
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),  # Normalize images with mean and std for pretrained models
])
# Base directory containing the folders
base_directory = path_to_file

# Create a custom dataset class
custom_dataset = datasets.ImageFolder(root=base_directory, transform=training_transform)

# Create a DataLoader
batch_size = 32


# Split dataset into training and validation sets
train_size = int(0.8 * len(custom_dataset))
val_size = len(custom_dataset) - train_size
train_dataset, val_dataset = random_split(custom_dataset, [train_size, val_size])

# Create DataLoaders for training and validation sets
train_loader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_loader = torch.utils.data.DataLoader(val_dataset, batch_size=batch_size, shuffle=False)

i = 0
for images, labels in train_loader:
    # Process the batch of images and their labels
    print(images.shape)  # Shape of the batch of images (batch_size, channels, height, width)
    print(labels)        # Batch of labels (batch_size,)
    if i >= 3:
        break
    i += 1
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

from torch.optim.lr_scheduler import StepLR
class CustomModel(nn.Module):
    def __init__(self, num_classes, dropout_prob=0.2):
        super(CustomModel, self).__init__()
        self.resnet = models.resnet50(pretrained=True)
        num_ftrs = self.resnet.fc.in_features
        self.resnet.fc = nn.Sequential(
            nn.Linear(num_ftrs, num_ftrs//2),
            nn.ReLU(),
            nn.BatchNorm1d(num_ftrs//2),  # Batch Normalization before dropout
            nn.Dropout(dropout_prob),  # Additional dropout layer
            nn.Linear(num_ftrs//2, num_ftrs//4),
            nn.ReLU(),
            nn.BatchNorm1d(num_ftrs//4),  # Batch Normalization before dropout
            nn.Dropout(dropout_prob-0.1),  # Adjusted dropout layer
            nn.Linear(num_ftrs//4, num_classes)  # Corrected to match the output of the previous layer
        )

    def forward(self, x):
        return self.resnet(x)

num_classes = 100  # number of classes

# Initialize model, loss function, optimizer, and scheduler
model = CustomModel(num_classes).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
scheduler = StepLR(optimizer, step_size=3, gamma=0.1)  # Adjusts learning rate every 7 epochs

num_epochs = 15
best_val_loss = np.inf
patience, trials = 3, 0  # for early stopping

for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        running_loss += loss.item() * inputs.size(0)

    scheduler.step()  # Adjust learning rate

    # Validation phase
    model.eval()
    val_loss = 0.0
    with torch.no_grad():
        for inputs, labels in val_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            val_loss += loss.item() * inputs.size(0)

    epoch_loss = running_loss / len(train_loader.dataset)
    epoch_val_loss = val_loss / len(val_loader.dataset)
    print(f'Epoch [{epoch + 1}/{num_epochs}], Loss: {epoch_loss:.4f}, Val Loss: {epoch_val_loss:.4f}')

    # Implement early stopping
    if epoch_val_loss < best_val_loss:
        best_val_loss = epoch_val_loss
        trials = 0
        # Save the best model
        torch.save(model.state_dict(), 'best_model.pth')
    else:
        trials += 1
        if trials >= patience:
            print(f'Stopping early at epoch {epoch + 1}')
            break

print('Training and validation finished')

from PIL import Image
# Define transformations for your test images
transform = transforms.Compose([
    transforms.Resize((224, 224)),  # Resize images to 256x256
    transforms.ToTensor(),           # Convert images to PyTorch tensors
    # Add any other transformations as needed
])

class UnlabeledDataset(Dataset):
    def __init__(self, data_dir, transform=None):
      self.data_dir = data_dir
      self.transform = transform
      # Use a sorting key that sorts files numerically
      file_list = sorted(
        [f for f in os.listdir(data_dir) if f.endswith('.jpg')],
        key=lambda x: int(x.split('.')[0])  # Extract number part and convert to int
      )
      self.file_list = [os.path.join(data_dir, f) for f in file_list]

    def __len__(self):
      return len(self.file_list)

    def __getitem__(self, idx):
      image_path = self.file_list[idx]
      image = Image.open(image_path).convert('RGB')
      if self.transform:
        image = self.transform(image)
      return image, os.path.basename(image_path)  # Return image and filename

# Load the unlabeled dataset
unlabeled_data_dir = '/content/drive/My Drive/test/test'
unlabeled_dataset = UnlabeledDataset(unlabeled_data_dir, transform=transform)

# Create a DataLoader
batch_size = 64
data_loader = DataLoader(unlabeled_dataset, batch_size=batch_size, shuffle=False)

i = 0
for images, labels in data_loader:
    # Process the batch of images and their labels
    print(images.shape)  # Shape of the batch of images (batch_size, channels, height, width)
    print(labels)        # Batch of labels (batch_size,)
    if i >= 3:
        break
    i += 1

predictions = []
filenames = []
for inputs, filename in data_loader:
    inputs = inputs.to(device)
    outputs = model(inputs)
    _, predicted = torch.max(outputs, 1)
    predictions.extend(predicted.cpu().numpy())
    filenames.extend(filename)

import csv

data_to_write = []
for filename, prediction in zip(filenames, predictions):
    # Remove leading '0' for files '00.jpg' through '09.jpg'
    # Rename '00.jpg' to '0.jpg'
  if filename == '00.jpg':
    filename = '0.jpg'
  else:
    filename = filename.lstrip('0 ') if filename.startswith('0') and not filename.startswith('10') else filename
  data_to_write.append([filename, prediction])


# Write data to CSV file
with open('predictions.csv', 'w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['ID', 'Label'])  # Write header
    writer.writerows(data_to_write)

print("Predictions have been written to 'predictions.csv'")

files.download('predictions.csv')


